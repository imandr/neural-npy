#include "Python.h"
#include <math.h>
#include "numpy/ndarraytypes.h"
//#include "numpy/ufuncobject.h"
#include "numpy/npy_3kcompat.h"
#include <stdio.h>
#include <stdlib.h>


#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define MIN(x,y) ((x) < (y) ? (x) : (y))
#define ABS(x)  ((x) < 0 ? -(x) : (x))

static PyObject *
py_convolve(PyObject *dummy, PyObject *args)
{
    /*
    *   Arguments:
    *       a - ndarray, nd=4
    *       f - ndarray, nd=4
    *       mode - int - 0 for "valid" and 1 for "full"
    *
    *    Convolution is done over last 2 dimensions of a and f. f is expected to be smaller
    *    in both of the convolution dimensions.
    *    First, the convolution of the 2 arrays (a1,a2,a3,a4) (f1,f2,f3,f4) produces
    *     (a1,a2,f1,f2,c1,c2)
    *    After the convolution, calculates the "trace" over 2nd dimension of both arrays
    *     (a1,a2,f1,f2,c1,c2) -> (a1,f1,c1,c2)
    */
    //printf("py_convolve\n");

    PyObject *arr1=NULL, *arr2=NULL;
    int mode, sumover;
    PyArrayObject *a=NULL, *f=NULL, *z=NULL;
    
    if (!PyArg_ParseTuple(args, "OOi", 
        &arr1, &arr2, 
        &mode)) return NULL;
        
    a = (PyArrayObject *)(PyArray_FROM_OTF(arr1, NPY_DOUBLE, NPY_IN_ARRAY));
    if (a == NULL) goto fail;
    
    f = (PyArrayObject *)(PyArray_FROM_OTF(arr2, NPY_DOUBLE, NPY_IN_ARRAY));
    if (f == NULL) goto fail;
    
    int nda = PyArray_NDIM(a);
    npy_intp *ashape = PyArray_SHAPE(a);
    int ndf = PyArray_NDIM(f);
    npy_intp *fshape = PyArray_SHAPE(f);
    
    npy_intp zshape[4];
    
    zshape[0] = ashape[0];
    zshape[1] = fshape[0];

    if( mode == 0 )
    {
        zshape[2] = ashape[2] - fshape[2] + 1;
        zshape[3] = ashape[3] - fshape[3] + 1;
    }
    else
    {
        zshape[2] = ashape[2] + fshape[2] - 1;
        zshape[3] = ashape[3] + fshape[3] - 1;
    }
    
    
    z = (PyArrayObject *) PyArray_SimpleNew(4, zshape, NPY_DOUBLE); /* assume we own the z reference now */
    if( z == NULL ) goto fail;
    
    int xa, ya, xf, yf, xz, yz, i, j, k, l;
    int fdx = PyArray_STRIDE(f, 1);
    int fdy = PyArray_STRIDE(f, 0);
    int adx = PyArray_STRIDE(a, 1);
    int ady = PyArray_STRIDE(a, 0);
    
    int stride_ay = PyArray_STRIDE(a, 2);
    int stride_ax = PyArray_STRIDE(a, 3);
    
    int stride_fy = PyArray_STRIDE(f, 2);
    int stride_fx = PyArray_STRIDE(f, 3);
    
    if( mode == 0 )
    {
        /* mode is "valid" */
        for(i=0; i<zshape[0]; i++)
            for(j=0; j<zshape[1]; j++)
                for(yz=0; yz<zshape[2]; yz++)
                    for(xz=0; xz<zshape[3]; xz++)
                    {
                        double val = 0;
                        for(k=0; k<ashape[1]; k++)
                        {

                            void *pay = PyArray_GETPTR4(a, i, k, yz, xz);
                            void *pfy = PyArray_GETPTR4(f, j, k, 0, 0);

                            for(yf=0; yf<fshape[2]; yf++)
                            {
                                void *pax = pay;
                                void *pfx = pfy;

                                for(xf=0; xf<fshape[3]; xf++)
                                {
                                    double va = *(double*)pax;
                                    double vf = *(double*)pfx;
                                    //printf("f: %d %d, a: %d %d\n", xf, yf, xa, ya);
                                    val += va * vf;
                                    pax += stride_ax;   
                                    pfx += stride_fx;
                                }
                                
                                pay += stride_ay;      
                                pfy += stride_fy;
                            }
                        }
                        *(double*)PyArray_GETPTR4(z, i, j, yz, xz) = val;
                    }
    }   
    else
    {
        /* mode is "full" with implied 0 padding */
        for(i=0; i<zshape[0]; i++)
            for(j=0; j<zshape[1]; j++)
                for(yz=0; yz<zshape[2]; yz++)
                    for(xz=0; xz<zshape[3]; xz++)
                    {
                        int ya_min = yz-fshape[2]+1;
                        int xa_min = xz-fshape[3]+1;
                        
                        double val = 0;
                        for(k=0; k<ashape[1]; k++)
                        {
                            void *pay = PyArray_GETPTR4(a, i, k, ya_min, xa_min);
                            void *pfy = PyArray_GETPTR4(f, j, k, 0, 0); 

                            for(yf=0, ya = ya_min; yf<fshape[2]; yf++, ya++)
                            {
                                void *pax = pay;
                                void *pfx = pfy;
                                
                                if( ya >=0 && ya < ashape[2] )
                                    for(xf=0, xa=xa_min; xf<fshape[3]; xf++, xa++)
                                    {
                                        if( xa >=0 && xa < ashape[3] )
                                        {
                                            double va = *(double*)pax;
                                            double vf = *(double*)pfx;
                                            val += va * vf;
                                        }
                                        pax += stride_ax;
                                        pfx += stride_fx;
                                    }
                                pay += stride_ay;
                                pfy += stride_fy;
                            }
                        }
                        *(double*)PyArray_GETPTR4(z, i, j, yz, xz) = val;
                    }
    }   
            
        
    Py_DECREF(a);
    Py_DECREF(f);
    /* transfer the ownership of the z reference now */
    return (PyObject *)z;
    
 fail:
    Py_XDECREF(a);
    Py_XDECREF(f);
    Py_XDECREF(z);
    return NULL;
}


static PyObject *
py_pool(PyObject *dummy, PyObject *args)
{
    /*
    *   Arguments:
    *       input - ndarray, nd=3
    *       pool_x  - int
    *       pool_y  - int
    *   Returns tuple:
    *       output - result of pool nd=3 [nb, ny, nx, nc]
    *       pool index - nd = 4:   [nb, ny, nx, nc, 2] nx, ny are dimensions of the output array
    *
    */
    //printf("py_convolve\n");

    PyObject *inp=NULL;
    PyArrayObject *input = NULL, *output = NULL, *pool_index = NULL;
    int pool_x, pool_y;

    if (!PyArg_ParseTuple(args, "Oii", &inp, &pool_x, &pool_y)) return NULL;
    
    int nb, input_x, input_y, input_c;
    int output_x, output_y, output_c;
        
    input = (PyArrayObject *)(PyArray_FROM_OTF(inp, NPY_DOUBLE, NPY_IN_ARRAY));
    if (input == NULL)
        return NULL;
    

    int in_dims = PyArray_NDIM(input);
    npy_intp *in_shape = PyArray_SHAPE(input);
    nb = in_shape[0];
    input_y = in_shape[1];
    input_x = in_shape[2];
    input_c = in_shape[3];
    output_x = (input_x+pool_x-1)/pool_x;
    output_y = (input_y+pool_y-1)/pool_y;
        
    npy_intp out_shape[4];
    
    out_shape[0] = nb;
    out_shape[1] = output_y;
    out_shape[2] = output_x;
    out_shape[3] = input_c;
    
    npy_intp index_shape[5];
    index_shape[0] = nb;
    index_shape[1] = output_y;
    index_shape[2] = output_x;
    index_shape[3] = input_c;
    index_shape[4] = 2;
    
    output = (PyArrayObject *) PyArray_SimpleNew(4, out_shape, NPY_DOUBLE); 
    if( output == NULL )
    {
        Py_XDECREF(input);
        return NULL;
    }
    
    pool_index = (PyArrayObject *) PyArray_SimpleNew(5, index_shape, NPY_INT); 
    if( pool_index == NULL )
    {
        Py_XDECREF(input);
        Py_XDECREF(output);
        return NULL;
    }     
    
    int ib, x, y, c, dx, dy, dxmax, dymax;
    double vmax;
    
    int stride_y = PyArray_STRIDE(input, 1);
    int stride_x = PyArray_STRIDE(input, 2);
    int stride_c = PyArray_STRIDE(input, 3);
    
    int stride_inx = PyArray_STRIDE(pool_index, 4);

    //printf("loop...\n");

    for( ib=0; ib < nb; ib++)
        for( y=0; y<output_y; y++ )
            for( x=0; x<output_x; x++ )
                for( c=0; c<input_c; c++ )
                {
                    int y0 = y*pool_y;
                    int x0 = x*pool_x;
                    void *py = PyArray_GETPTR4(input, ib, y0, x0, c);
                    vmax = *(double*)py;
                    dxmax = dymax = 0;
                    for( dy = 0; dy < pool_y && y0 + dy < input_y; dy++ )
                    {
                        int yy = y0 + dy;
                        void *px = py;
                        for( dx = 0; dx < pool_x && x0 + dx < input_x; dx++ )
                        {
                            int xx = x0 + dx;
                            double v = *(double*)px;
                            //double v = *(double*)PyArray_GETPTR3(input, yy, xx, c);
                            if( v > vmax )
                            {
                                vmax = v;
                                dxmax = dx;
                                dymax = dy;
                            }
                            px += stride_x;
                        }
                        py += stride_y;
                    }
                    //printf("%d, %d, %d: vmax=%f at %d %d\n", y, x, c, vmax, dymax, dxmax);
                    *(double*)PyArray_GETPTR4(output, ib, y, x, c) = vmax;
                    
                    npy_intp index_inx[5] = {ib, y, x, c, 0};
                    void *index_ptr = PyArray_GetPtr(pool_index, index_inx);
                    *(int*)index_ptr = dymax;
                    *(int*)(index_ptr+stride_inx) = dxmax;
                }
    //printf( "Building tuple...\n");
    PyObject *out = Py_BuildValue("(OO)", (PyObject*)output, (PyObject*)pool_index);
    Py_DECREF(input);
    Py_DECREF(output);
    Py_DECREF(pool_index);
    //printf("returning\n");
    return out;
    
 fail:
    Py_XDECREF(input);
    Py_XDECREF(output);
    Py_XDECREF(pool_index);
    return NULL;
}
    

static PyObject *
py_pool_back(PyObject *dummy, PyObject *args)
{
    /*
    *   Arguments:
    *       gradient on the output side - ndarray, nd=3 [nb, ny, nx, nc]
    *       pool_index  [nb, ny, nx, nc, 2]
    *       pool_x  - int
    *       pool_y  - int
    *       output, initialized with zeros of appropriate dimensions
    */

    PyObject *arr1=NULL, *arr2=NULL, *arr3=NULL;
    PyArrayObject *grads = NULL, *output = NULL, *pool_index = NULL;
    int pool_x, pool_y;

    if (!PyArg_ParseTuple(args, "OOiiO", &arr1, &arr2, &pool_x, &pool_y, &arr3)) return NULL;
    
    grads = (PyArrayObject *)(PyArray_FROM_OTF(arr1, NPY_DOUBLE, NPY_IN_ARRAY));
    if (grads == NULL)
    {
        Py_XDECREF(arr1);
        Py_XDECREF(arr2);
        Py_XDECREF(arr3);
        return NULL;
    }

    pool_index = (PyArrayObject *)(PyArray_FROM_OTF(arr2, NPY_INT, NPY_IN_ARRAY));
    if (pool_index == NULL)
    {
        Py_XDECREF(arr1);
        Py_XDECREF(arr2);
        Py_XDECREF(arr3);
        return NULL;
    }

    output = (PyArrayObject *)(PyArray_FROM_OTF(arr3, NPY_DOUBLE, NPY_OUT_ARRAY));
    if (output == NULL)
    {
        Py_XDECREF(arr1);
        Py_XDECREF(arr2);
        Py_XDECREF(arr3);
        return NULL;
    }


    int grad_x, grad_y, grad_c;
    int output_x, output_y, output_c;
    int index_x, index_y, index_c;
        
    int grad_dims = PyArray_NDIM(grads);
    npy_intp *grad_shape = PyArray_SHAPE(grads);
    int nb = grad_shape[0];
    grad_y = grad_shape[1];
    grad_x = grad_shape[2];
    grad_c = grad_shape[3];
    
    int index_dims = PyArray_NDIM(pool_index);
    npy_intp *index_shape = PyArray_SHAPE(pool_index);
    index_y = index_shape[1];
    index_x = index_shape[2];
    index_c = index_shape[3];
    
    int out_dims = PyArray_NDIM(output);
    npy_intp *out_shape = PyArray_SHAPE(output);
    output_y = out_shape[1];
    output_x = out_shape[2];
    output_c = out_shape[3];
        
    
    int grad_stride_b = PyArray_STRIDE(grads, 0);
    int grad_stride_y = PyArray_STRIDE(grads, 1);
    int grad_stride_x = PyArray_STRIDE(grads, 2);
    int grad_stride_c = PyArray_STRIDE(grads, 3);
    
    int index_stride_b = PyArray_STRIDE(pool_index, 0);
    int index_stride_y = PyArray_STRIDE(pool_index, 1);
    int index_stride_x = PyArray_STRIDE(pool_index, 2);
    int index_stride_c = PyArray_STRIDE(pool_index, 3);
    int index_stride_d = PyArray_STRIDE(pool_index, 4);

    void *gpb = PyArray_GETPTR4(grads, 0, 0, 0, 0);
    
    //printf("grad[0,0,0]=%f\n", *(double*)gpy);
    
    npy_intp zeros[5] = {0,0,0,0,0};
    void *ipb = PyArray_GetPtr(pool_index, zeros);

    int ib, x, y, c, dx, dy;
    for( ib=0; ib<nb; ib++ )
    {
        void *gpy = gpb;
        void *ipy = ipb;
        
        for( y=0; y<index_y; y++ )
        {
            void *gpx = gpy;
            void *ipx = ipy;
            for( x=0; x<index_x; x++ )
            {
                void *gpc = gpx;
                void *ipc = ipx;
                for( c=0; c<index_c; c++ )
                {
                    int dy = *(int*)ipc;
                    int dx = *(int*)(ipc + index_stride_d);
                
                    if( 0 )
                        printf("%d, %d, %d, %d, %d+%d, %d+%d <- %f\n", 
                            ib, y, x, c,
                                y*pool_y, dy, x*pool_x, dx, 
                                *(double*)gpc);
                    *(double*)PyArray_GETPTR4(output, ib, y*pool_y+dy, x*pool_x+dx, c) = 
                        //*(double*)PyArray_GETPTR4(grads, ib, y, x, c);
                        *(double*)gpc;
                    gpc += grad_stride_c;
                    ipc += index_stride_c;
                }
                gpx += grad_stride_x;
                ipx += index_stride_x;
            }
            gpy += grad_stride_y;
            ipy += index_stride_y;
        }
        gpb += grad_stride_b;
        ipb += index_stride_b;
    }
    Py_XDECREF(grads);
    Py_XDECREF(pool_index);
    Py_XDECREF(output);
    Py_INCREF(Py_None);
    return Py_None;
}
    



static PyMethodDef module_methods[] = {
    {"convolve", (PyCFunction) py_convolve, METH_VARARGS, "Convolution"},
    {"pool", (PyCFunction) py_pool, METH_VARARGS, "Pool(max)"},
    {"pool_back", (PyCFunction) py_pool_back, METH_VARARGS, "Gradient backpropagation for pool"},
    {NULL}  /* Sentinel */
};

    
    
#ifndef PyMODINIT_FUNC	/* declarations for DLL import/export */
#define PyMODINIT_FUNC void
#endif
PyMODINIT_FUNC
initcconv(void) 
{
    PyObject* m;

    m = Py_InitModule3("cconv", module_methods,
                       "Low level convolution network library");
    import_array();
}
